# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oZTFKiN3jjOmm7EtchIsMLq2w1vjUa4C
"""

import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.metrics import confusion_matrix, roc_curve, auc

# Load trained model
model = joblib.load("rf_fraud_model.pkl")

# Dashboard Title
st.set_page_config(page_title="Fraud Detection Dashboard", layout="wide")
st.title("💳 Fraud Detection Dashboard")

# Sidebar
st.sidebar.header("Navigation")
page = st.sidebar.radio("Go to:", ["📂 Data Overview", "🔮 Predictions", "📊 Model Insights", "ℹ️ About Project"])

# ---- PAGE 1: Data Overview ----
if page == "📂 Data Overview":
    st.header("Dataset Overview")
    uploaded_file = st.file_uploader("Upload your CSV dataset", type=["csv"])
    if uploaded_file:
        data = pd.read_csv(uploaded_file)
        st.dataframe(data.head(20))

        st.markdown("### Fraud vs Normal Distribution")
        if "Class" in data.columns:
            fig, ax = plt.subplots()
            data["Class"].value_counts().plot.pie(autopct='%1.1f%%', labels=["Normal", "Fraud"], colors=["#4CAF50", "#F44336"], ax=ax)
            st.pyplot(fig)

        st.markdown("### Correlation Heatmap")
        fig, ax = plt.subplots(figsize=(10,6))
        sns.heatmap(data.corr(), cmap="coolwarm", ax=ax)
        st.pyplot(fig)
    else:
        st.info("Please upload a CSV file to see the dataset overview.")

# ---- PAGE 2: Predictions ----
elif page == "🔮 Predictions":
    st.header("Make Predictions")

    st.markdown("Upload a CSV with transactions to classify them as Fraud or Normal.")
    pred_file = st.file_uploader("Upload transactions for prediction", type=["csv"], key="pred")

    if pred_file:
        new_data = pd.read_csv(pred_file)
        preds = model.predict(new_data)
        new_data["Prediction"] = preds
        st.dataframe(new_data.head(20))

        fraud_count = (preds == 1).sum()
        normal_count = (preds == 0).sum()

        st.metric("Fraud Count", fraud_count)
        st.metric("Normal Count", normal_count)

# ---- PAGE 3: Model Insights ----
elif page == "📊 Model Insights":
    st.header("Model Insights")

    # Feature Importance
    st.subheader("Feature Importance")
    importances = model.feature_importances_
    features = [f"F{i}" for i in range(len(importances))]  # Feature names dummy
    feat_df = pd.DataFrame({"Feature": features, "Importance": importances})
    feat_df = feat_df.sort_values(by="Importance", ascending=False)

    fig, ax = plt.subplots()
    sns.barplot(x="Importance", y="Feature", data=feat_df.head(15), ax=ax, palette="viridis")
    st.pyplot(fig)

    # Example Confusion Matrix (static demo)
    st.subheader("Confusion Matrix (Example)")
    y_true = np.array([0,0,1,1,0,1,0,1])
    y_pred = np.array([0,0,1,0,0,1,1,1])
    cm = confusion_matrix(y_true, y_pred)
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", ax=ax)
    ax.set_xlabel("Predicted")
    ax.set_ylabel("Actual")
    st.pyplot(fig)

    # Example ROC Curve (static demo)
    st.subheader("ROC Curve (Example)")
    fpr, tpr, _ = roc_curve(y_true, y_pred)
    roc_auc = auc(fpr, tpr)
    fig, ax = plt.subplots()
    ax.plot(fpr, tpr, color="darkorange", lw=2, label=f"AUC = {roc_auc:.2f}")
    ax.plot([0,1], [0,1], color="navy", lw=2, linestyle="--")
    ax.set_xlabel("False Positive Rate")
    ax.set_ylabel("True Positive Rate")
    ax.legend()
    st.pyplot(fig)

# ---- PAGE 4: About ----
elif page == "ℹ️ About Project":
    st.header("About this Project")
    st.markdown("""
    ### 📝 Project Description
    - **Goal:** Detect fraudulent transactions in financial data.
    - **Model Used:** RandomForestClassifier
    - **Main Metric:** ROC-AUC > 0.99
    - **Why Important?** Fraud costs billions every year; early detection saves time and money.

    ### 👨‍💻 Tech Stack
    - Python, Pandas, Scikit-learn
    - Streamlit (for Dashboard)
    - Matplotlib & Seaborn (for Visualization)

    ### 🚀 How to Use
    - Upload transaction CSVs to test fraud detection.
    - Explore model insights & feature importances.
    - Use dashboard visuals for reporting.
    """)

